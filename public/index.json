[{"categories":null,"content":"New series from 0 to 1k stars 🤡🤡 ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:0:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Mở đầu Trong một lần tình cờ được ngồi nói chuyện với anh Luật ( Founder của CyberJustu ), mình đã được anh chia sẻ rất nhiều vấn đề hay và bị ấn tượng bởi câu hỏi “Bọn em làm gì với đống request sau 1 dự án pentest?”. Tại thời điểm đó, mình chỉ quan tâm đến report của dự án như là: Có tìm được lỗi không, mức độ ảnh hưởng ra sao hay cách khai thác có gì mới lạ không ?. Sau khi nghe câu trả lời từ anh mình kiểu. Đại khái ý tưởng là: Burp =\u003e Request =\u003e Log =\u003e Big Data =\u003e Process =\u003e Do something Có ý tưởng rồi thì phải làm thôi Gét Go My Data My Choice. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:1:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"ELK Stack Nghĩ đến việc ghi log thì ELK stack là trùm, nói sơ qua một chút về ELK Stack thì đây là combo thần thánh trong việc logging. ELK Stack bao gồm 3 phần: ElasticSearch: Cơ sở dữ liệu để lưu trữ, tìm kiếm và query log. Logstash: Tiếp nhận log từ nhiều nguồn, xử lý và ghi dữ liệu log vào ElasitcSearch. Kibana: Giao diện quản lý, thống kê log từ ElasticSearch. Trong trường hợp này, đa số mình sẽ chỉ lấy log từ BurpSuite nên việc sử dụng Logstash là không cần thiết nên mình rút gọn lại chỉ sử dụng ElasticSearch và Kibana. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:1:1","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"ElasticBurp-NG ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:2:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Logger++ và ElasticBurp Từ ý tưởng trên thì mình có 2 hướng tiếp cận: Viết 1 proxy rồi cho BurpSuite đi qua, từ đó đẩy lên ElasticSearch: Tuy nhiên, trong quá trình phát triển mình nhận thấy cách tiếp cận này có khá nhiều bất cập nên mình chọn hướng tiếp cận thứ 2. Viết BurpSuite Extension cho phép đẩy log lên ElasticSearch: Cách tiếp cận này gần như giải quyết hết các vấn đề mình quan tâm nhưng tại sao mình không chọn hướng tiếp cận này đầu tiên ?. Đơn giản mình không thích Python còn Java thì mỗi lần chỉnh sửa code lại phải compile ra file jar để sử dụng. Google Search \"How to write Burp Extension with Go\" =\u003e Rewrite Burp to support Go 🤡🤡🤡🤡🤡🤡🤡🤡 Lượn lờ trên mạng thì thấy có 2 Burp Extension phù hợp: Logger++ và ElasticBurp. Sau khi xem cả 2 extension thì mình thấy: Logger++ nhiều chức năng không cần đến, lại viết bằng java nên nếu muốn thêm một số chức năng thì lại phải complie tốn time =\u003e Lười =\u003e Next ElasticBurp ít chức năng nhưng viết bằng Python =\u003e dễ dàng customize=\u003e Vì vậy mình sẽ lấy luôn mã nguồn của ElasticBurp được tạo bởi thomaspatzke để cải tiến cũng như phát triển thêm một số tính năng để thực hiện ý tưởng ban đầu. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:2:1","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Develop Theo như hướng dẫn của ElasticBurp trên github: Cài đặt ElasticSearch Cài ElasticBurp Cấu hình và chạy Làm theo hướng dẫn và bùm lỗi liên tục vào mồm. Đã lười thì chớ lại còn phải fix bug nữa. Dưới đây là các lỗi khiến mình nhớ nhất. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:3:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"TypeError: unicode indices must be integers Vừa cấu hình và nhấn apply thì đã có cái lỗi đấm vào mồm rồi. Nguyên nhân: Do sử dụng sai phiên bản thư viện elasticsearch và elasticsearch-dsl. ElasticSearch mình đang sử dụng là phiên bản 7.17.5 trong khi phiên bản của 2 thư viện elasticsearch và elasticsearch-dsl được cài theo extension là 6.0.0. Cách khắc phục: Update 2 thư viện lên phiên bản tương thích với ElasticSearch 7.x. Mình đã fix thành công và đẩy được log lên server ElasticSearch nhưng mình lại gặp vấn đề với hiệu năng. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:3:1","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Lỗi Performance Khi sử dụng extension, mình thấy hiệu năng giảm rõ rệt. Request xử lý rất là chậm khi so sánh với lúc không sử dụng. Điều này thường xuyên xảy ra với các trang web gửi nhiều request như Facebook, bình thường truy cập vào Facebook chỉ mất 1-2 giây là load xong mà khi sử dụng extension mất tới 30 giây mới load xong và nó gây khó chịu y như lúc mạng lag. Nguyên nhân : Do default timeout là 10s nên khi gặp lỗi timeout thì request phải đợi 10s mới được tiếp tục xử lý. Cách khắc phục: Giảm thời gian timeout. Vấn đề trên đã được giải quyết nhưng khi mình kiểm tra thì thấy số lượng request không đẩy lên ElasticSearch khá là nhiều. Sau khi search thì mình thấy có 2 khả năng là nguyên nhân chính: Do Server yếu không đáp ứng được. Dữ liệu lớn mà thời gian timeout đặt chưa hợp lý. Mình đã thử sử dụng Logger++ để kiểm tra xem nguyên nhân thực sự thì thấy Logger++ vẫn log được đầy đủ các requests. Tham khảo cách xử lý của Logger++ thì cách giải quyết là lưu dữ liệu và Lại quay về câu chuyện con gà và quả trứng: nếu đặt timeout thấp thì mất dữ liệu còn nếu đặt timeout cao thì request xử lý chậm. Mình đã thử sử dụng Logger++ để kiểm tra xem có gặp lỗi có phải do phía server hay không thì không thấy tình trạng tương tự xảy ra. Sau khi đọc source code , mình biết được cách cách xử lý của Logger++ là có 1 list để lưu các request và đẩy lên server sau 1 khoảng thời gian nhất định. Đến đây có thể tạm kết luận nguyên nhân là do timeout chưa hợp lý. Lại quay về câu chuyện con gà và quả trứng nếu để timeout thấp thì thường xuyên mất request còn để timeout cao thì thời gian xử lý request lâu gây khó chịu. Time to đa luồng: Cách xử lý là tạo 1 luồng để thực hiện việc ghi và tăng timeout lên =\u003e Cả 2 vấn đề đều đã được giải quyết.Tuy nhiên tình trạng mất request do timeout vẫn xảy ra nhưng không đáng kể. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:3:2","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Redis cache Đây là 1 chức năng mình thêm vào để giảm thiểu các request trùng lặp cũng như cải thiện performance. Nguyên nhân:: Trước khi thêm 1 chức năng mới mình thường kiểm tra code trên Python trước, code đã chạy như mình mong đợi nhưng lúc chạy với Burp lại thông báo lỗi liên quan đến socket. Mất khoảng 1 ngày mình mới tìm thấy nguyên nhân của vấn đề là do cách xử lý lỗi với socket của Jython trên Windows khác thông thường. Chi tiết về lỗi có thể đọc ở đây Cách khắc phục: Cách khắc phục đã được mình nói ở phần issues nên ở đây mình không nói lại nữa. Trong thời gian phát triển mình gặp khá nhiều lỗi ối dồi ôi mà không đề cập ở đây. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:3:3","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Feature Extension có 2 tính năng chính là: Tập trung log của các thành viên trong team khi pentest: Cho phép chia sẻ request Thử tưởng tượng trong trường hợp bạn gặp 1 request khả nghi dính XSS nhưng chưa tìm được cách bypass và muốn chia sẻ request đấy cho người khác thì đơn giản chỉ cần đưa mã hash của request đấy thay vì phải copy toàn bộ request. Nếu có bất kỳ lỗi nào trong quá trình sử dụng hay có ý tưởng gì các bạn có thể phản hồi để mình có thể hoàn thiện ElasticBurp-NG ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:4:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Install Start here 👇️👇️👇️ https://github.com/n00b-bot/elastic-burp ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:5:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Thanks ML from CyberJustu vì chia sẻ ý tưởng. thomaspatzke vì tạo ra ElasticBurp. DamionNg, quaccws, datmom.txt, ewind vì những đóng góp tấu hài. ","date":"2022-09-04","objectID":"/elasticburp-ng-part-1/:6:0","tags":["Burp","ElasticSearch"],"title":"My Data My Choice - P1. ElasticBurp-NG","uri":"/elasticburp-ng-part-1/"},{"categories":null,"content":"Lan tỏa tấu hài đi muôn nơi 🙃 🙃 Tôi dự định học OSCP từ tháng 8/2021 nhưng vì một số lý do mà đến tháng 3/2022 tôi mới bắt đầu đăng kí học được. Vì không phải mất tiền(làm gì có bữa trưa nào miễn phí, tôi phải anh bạn à liên tục vào mồm đấy 🤪🤪🤪) nên tôi đã đăng kí PEN-200 course + 90-days lab access. Theo lịch chính thức khóa học sẽ bắt đầu vào 13/3, nhưng sau khi nghe văn khích của 2 đồng đội ( Sợ à 🙂) tôi đã thay đổi lịch học để bắt đầu sớm hơn. Hành trình tấu hài bắt đầu từ đây(Adventure Time) Khi bắt đầu làm một thứ gì đó, tôi thường sẽ hình dung về những việc mình sẽ làm và đây cũng không phải là ngoại lệ. Tôi đã lên kế hoạch trong đầu mà theo tôi nghĩ nó là tuyệt vời con mịa nó rồi. Sơ qua về kế hoạch cực kì chi tiết: Đọc hết sách PWK Làm hết Lab được cung cấp Làm thêm với HTB và PG Viết report exercise để kiếm 10 point Như một lẽ thường tình, tôi đã hoàn thành được những 1/4 kế hoạch hoàn hảo tôi đã đặt ra là hoàn thành tất cả lab trong bài học còn các việc khác trong tình trạng như sau: Đọc sách đến 1/3 thì thấy đều là những kiến thức tôi biết rồi nên tôi quyết định tạm dừng việc đọc sách (tạm dừng vĩnh viễn chứ không phải bỏ nhé 😄)để chuyển sang thực hành. Phải thừa nhận việc viết report exercise không hề đơn giản như tôi nghĩ. Khi đã viết được 3 chương đầu và hóng được report sẽ dài khoảng 400 trang, tôi cho nó chim cút luôn. Trong 3 tháng học đó, công việc hàng ngày của tôi sẽ là dù có bận đến đâu sáng tôi cũng sẽ ngồi làm lab đến lúc ăn. Trong lúc ăn trưa thì tấu hài với 2 thằng cùng cty cũng đang học OSCP, xin được shoutout cho 2 đồng đội. Một trong 2 thằng là kẻ hủy diệt toán học, ông trùm phương pháp tính( kỉ lục 4 lần liên tiếp trượt) , thủ khoa đại học bách khoa với số điểm 29.75 aka datmom.exe ☠️ và cũng là kẻ tạo ra những câu punch line để đời. Kẻ còn lại là một con lợn trong hình hài con người và cũng là ông trùm giấu tin trong ảnh( chịuuu nhé), kẻ bề tôi của Vua nụ cười của cty. Sau khi học xong tôi mới hiểu được slogan của offsec “Try Harder !!” 💯 , cố gắng hơn nữa khi mình nghĩ mình đang cố gắng điều này giúp tôi khá nhiều trong khi làm lab. Mất khoảng 2 tháng để tôi hoàn thành hết tất cả bài lab trong khóa học, mặc dù có thể thi luôn nhưng do chưa biết đề thi format mới thế nào nên tôi quyết định mua thử 1 tháng PG để làm tiếp cũng như tăng độ tự tin khi làm bài. Dự định ban đầu của tôi sẽ là từ PG chọn ngẫu nhiên ra để thành 1 đề thi thử, tuy nhiên sau khi làm 1 số bài có cả brute force mật khẩu( hẳn phải tuyệt vọng lắm thì tôi mới nghĩ đến brute force) và trong đó cũng không hề có các bài về AD nên tôi quyết định không làm thử để tránh ảnh hưởng đến sự tự tin của mình. Cảm thấy việc chờ đợi khá là chán nản thêm việc con lợn trong hình hài con người đã tự hủy trước nên tôi quyết định đăng kí ngày thi sau nó khoảng 1 tuần tức là ngày 9/6. Quá trình làm bài cũng tấu hài không kém. “Đầu xuôi đuôi lọt” nhưng khởi đầu đã tấu hài rồi. Bắt đầu bằng việc đăng nhập vào hệ thống để thi thì hệ thống lỗi. Sau một hồi gửi mail nhờ hỗ trợ tôi được cộng thêm 30 phút do lỗi hệ thống. Kết nối thành công đến máy thi sau mở đầu không thể cồng kềnh hơn, mở đề và surprise trong đó có 5 máy trong khi đề thi bình thường là 4. Và điều tôi sợ nhất đã xảy ra BOF 🙂 từ lúc học tôi đã không thích BOF không phải vì nó khó hiểu mà nó thật sự quá dập khuôn chỉ làm theo các bước. Sau khoảng 3 tiếng tôi đã hoàn thành AD và 1 máy khác, lúc này tôi đã có 60 point ( thiếu đúng 10 point để đủ điểm đỗ). Trong đầu tôi lúc này nghĩ “Hình như chọn nhầm độ khó rồi, game này hơi dễ !!” 🙃 🙃 (gáy sớm thì làm sao nhỉ 🙂 🙂). Hai bài còn lại đấm liên tục không trượt phát nào vào mồm tôi, BOF tôi xác định bỏ ngay từ đầu nên tôi quyết định tập trung vào bài còn lại. Trong lúc recon, tôi đi làm mấy trò con bò như lên youtube nghe nhạc và suy nghĩ chuẩn bị lúc làm xong sẽ gáy những gì. Hai tiếng tiếp theo không có gì đặc biệt nên tôi xin break để ăn cơm, nghỉ ngơi thư giãn 1 tiếng sau tôi tiếp tục làm lúc đó vào khoảng 8h mà tôi tự tin trong tối sẽ làm xo","date":"2022-06-16","objectID":"/oscp/:0:0","tags":["OSCP"],"title":"Cách mà OSCP đã tấu hài với tôi😛","uri":"/oscp/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt\r","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 73 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"/about/:1:4","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"About LoveIt","uri":"/about/"}]